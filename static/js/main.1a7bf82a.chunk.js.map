{"version":3,"sources":["components/layout/Navbar.js","components/pages/UserForm.js","components/pages/Users.js","components/pages/User.js","components/pages/Report.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","UserForm","useState","name","age","dob","profession","locality","noofguests","address","formData","setFormData","onChange","e","target","value","onSubmit","a","preventDefault","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","alert","type","placeholder","required","rows","Users","state","isLoading","users","error","fetchUsers","json","data","setState","catch","componentDidMount","this","message","map","user","id","newTo","pathname","param1","key","React","Component","User","props","match","params","location","Report","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1a7bf82a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../App.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className='navbar'>\r\n      <div className='logo'>\r\n        <h1>\r\n          <i className='fas fa-glass-cheers' />\r\n          Meetup RSVP\r\n        </h1>\r\n\r\n      </div>\r\n      <ul className=\"nav-list\">\r\n        <li>\r\n          <Link to='/register'>Register</Link>\r\n        </li>\r\n        <span className='sm-hide'></span>\r\n        <li>\r\n          <Link to='/users'>Users</Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/report'>Report</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../../App.css\";\r\n\r\nconst UserForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    age: \"\",\r\n    dob: \"\",\r\n    profession: \"\",\r\n    locality: \"\",\r\n    noofguests: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const {\r\n    name,\r\n    age,\r\n    dob,\r\n    profession,\r\n    locality,\r\n    noofguests,\r\n    address,\r\n  } = formData;\r\n\r\n  const onChange = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        name,\r\n        age,\r\n        dob,\r\n        profession,\r\n        locality,\r\n        noofguests,\r\n        address,\r\n      }),\r\n    };\r\n    fetch(\r\n      \"https://userrsvp.free.beeceptor.com/adduser\",\r\n      requestOptions\r\n    ).then((response) => alert(\"User Registered\"));\r\n  };\r\n\r\n  return (\r\n    <div className='form-container'>\r\n\r\n      <h1 className='large text-primary'>Sign Up</h1>\r\n      <form className='form' onSubmit={(e) => onSubmit(e)}>\r\n      <div className='form-group'>\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          placeholder='Enter your name'\r\n          value={name}\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        /> \r\n        </div>\r\n        <div className='form-group'>\r\n        <input\r\n          type='number'\r\n          name='age'\r\n          placeholder='Enter your age'\r\n          value={age}\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        />\r\n        </div>\r\n        <div className='form-group'>\r\n        <input\r\n          type='date'\r\n          name='dob'\r\n          value={dob}\r\n          placeholder='Enter DOB'\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        />\r\n        </div>\r\n        <div className='form-group'>\r\n        <select name='profession' required>\r\n          <option>Choose your profession</option>\r\n          <option>Employed</option>\r\n          <option>Student</option>\r\n        </select>\r\n        </div>\r\n        <div className='form-group'>\r\n        <input\r\n          type='text'\r\n          name='locality'\r\n          value={locality}\r\n          placeholder='Enter location'\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        />\r\n        </div>\r\n        <div className='form-group'>\r\n        <input\r\n          type='number'\r\n          name='noofguests'\r\n          value={noofguests}\r\n          placeholder='Enter no. of guests'\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        />\r\n        </div>\r\n        <div className='form-group'>\r\n        <textarea\r\n          type='text'\r\n          placeholder='Enter address'\r\n          name='address'\r\n          rows='4'\r\n          value={address}\r\n          onChange={(e) => onChange(e)}\r\n          required\r\n        />\r\n        </div>\r\n        <input type='submit' className='btn btn-primary' value='Register' />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../../App.css\";\r\n\r\nclass Users extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    users: [],\r\n    error: null,\r\n  };\r\n  fetchUsers = () => {\r\n    fetch(`https://my.api.mockaroo.com/users.json?key=09e9b680`)\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          users: data,\r\n          isLoading: false,\r\n        })\r\n      )\r\n      .catch((error) => this.setState({ error, isLoading: false }));\r\n  };\r\n\r\n \r\n\r\n  componentDidMount = () =>{\r\n    this.fetchUsers();\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, users, error } = this.state;\r\n    return (\r\n      <div className='users-page'>\r\n        <div className='users-data'>\r\n          {error ? <p>{error.message}</p> : null}\r\n          {!isLoading ? (\r\n            users.map((user) => {\r\n              const { id, name, locality } = user;\r\n              const newTo = { \r\n                pathname: `/user/${id}`, \r\n                param1: user \r\n              };\r\n              return (\r\n                <div key={id} className=\"users-block\" >\r\n                  <p>Name: {name}</p>\r\n                  <p>Locality: {locality}</p>\r\n                  <div className='buttons m-1'>\r\n                    \r\n                  <Link to={newTo} className='btn-primary'>\r\n                    View Profile\r\n                  </Link>\r\n                </div>\r\n                  <hr />\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <h3>Loading...</h3>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Users;\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport \"../../App.css\";\r\n\r\nfunction User(props) {\r\n    let id = props.match.params.id;\r\n    const user = props.location.param1;\r\n    return (\r\n        <div>\r\n            <Link to='/users' className='btn btn-primary backtoprofile'>\r\n            Back to profiles\r\n          </Link>\r\n          <div className=\"user-block\">\r\n            <p>Name: {user.name}</p>\r\n            <p>Age: {user.age}</p>\r\n            <p>DOB: {user.dob}</p>\r\n            <p>Profession: {user.profession}</p>\r\n            <p>Locality: {user.locality}</p>\r\n            <p>No. Of Guests: {user.noofguests}</p>\r\n            <p>Address: {user.address}</p>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react'\r\nimport \"../../App.css\";\r\nclass Report extends React.Component {\r\n \r\n    render(){\r\n    return (\r\n    \r\n        <div className=\"report-block\">\r\n            <div>\r\n                <h4>Number of people in a given age range</h4>\r\n            </div>\r\n            <div><h4>Number of people by localities.</h4></div>\r\n            <div><h4>Average group size of people attending the event</h4></div>\r\n            <div><h4>Professionals and students count.</h4></div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Report\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/layout/Navbar\";\nimport UserForm from \"./components/pages/UserForm\";\nimport Users from \"./components/pages/Users\";\nimport User from \"./components/pages/User\";\nimport Report from './components/pages/Report'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route exact path='/register' component={UserForm} />\n          <Route exact path='/users' component={Users} />\n          <Route exact path='/user/:id' component={User} />\n          <Route exact path='/report' component={Report} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}